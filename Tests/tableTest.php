<?php

require_once 'C:\wamp\www\framework\db.php';
require_once '../rolisz.php';

/**
 * Test class for table.
 * Generated by PHPUnit on 2011-04-02 at 17:02:53.
 */
class tableTest extends PHPUnit_Framework_TestCase {
	/**
 	* @var table
 	*/
	protected $object;

	/**
 	* Sets up the fixture, for example, opens a network connection.
 	* This method is called before a test is executed.
 	*/
	public  static function setUpBeforeClass() {
		rolisz::connect('MySQLi','localhost','root','','test');
	}

	/**
 	* Tears down the fixture, for example, closes a network connection.
 	* This method is called after a test is executed.
 	*/
	public static function tearDownAfterClass() {
		$con = rolisz::get('dbCon');
		$con->Query('TRUNCATE `maintabel`;
TRUNCATE `many2main`;
TRUNCATE `many2many`;
TRUNCATE `tabellegatura`;');
	}	

	/**
 	* @dataProvider tabeleTrue
 	*/
	public function testSave($tabel,$data) {
		$table = new table($tabel);
		foreach ($data as $key=>$value) {
			$table->$key = $value;
		}
		$table->save();
		
		$table = table::findS($tabel,$data);
		$this->assertNotNull($table);
		$pK = $table->getPrimaryKey(TRUE);
		return $pK;
	}

	public function tabeleTrue() {
		return array(
			array('maintabel',array('text'=>'text1'),1),
			array('many2main',array('id_maintabel'=>4,'text'=>'text2'),1),
			array('many2many',array('texttabel2'=>'test2'),1)
			
		);
		
	}
	
	public function relations() {
		return array(
			array('maintabel','many2main','id','id_maintabel')
		);
	}
	
	/**
	 * @dataProvider relations 
	 * 
	 */
	public function testAddRelation($tabel, $tabelrel, $oK,$tK) {
		table::AddRelationS($tabel,$tabelrel,$oK,$tK);
		$this->assertArrayHasKey($tabelrel,table::$relations[$tabel]);
		$this->assertArrayHasKey($tabel,table::$relations[$tabelrel]);
	}
	
	public function relatii() {
		return array(
			array()
		)	;
	}
	
	/**
	 * @dataProvider relatii
	 */
	public function testRelationSetting() {
		$this -> markTestIncomplete('This test has not been implemented yet.');
	}
	/**
 	 * 
	 * @dataProvider tabeleTrue
	 * 
	*/
	public function testDelete($tabel, $args, $id) {
		$table = new table($tabel,$id);
		$this->assertNotEmpty($table->getData(),'This'.$id.' failed');
		$table->delete();
		$this->assertEmpty($table->getData(),$id);
		$table = new table($tabel, $id );
		$this->assertEmpty($table->getData());
	}

	/**
 	* @todo Implement testFind().
 	*/
	public function testFind() {
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete('This test has not been implemented yet.');
	}

	/**
 	* @todo Implement testSetAll().
 	*/
	public function testSetAll() {
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete('This test has not been implemented yet.');
	}

	/**
 	* @todo Implement testImportRows().
 	*/
	public function testImportRows() {
		// Remove the following lines when you implement this test.
		$this -> markTestIncomplete('This test has not been implemented yet.');
	}

}
?>
